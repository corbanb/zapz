---
name: Code Quality

on:
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install yamllint
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint

      - name: Create config directory
        run: |
          mkdir -p ~/.config/yamllint
          cp .yamllint ~/.config/yamllint/config

      - name: ShellCheck
        uses: ludeeus/action-shellcheck@master
        with:
          severity: warning

      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3.1.1
        with:
          config_file: .yamllint
          strict: false

      - name: Report Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;

            core.info(`Run ID: ${run_id}`);

            if (!run_id) {
              core.warning('No run ID found, skipping status report');
              return;
            }

            try {
              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id
              });

              const job = jobs.data.jobs.find(j => j.name === 'lint');
              if (!job) {
                core.warning('Could not find lint job');
                return;
              }

              const conclusion = job.conclusion || 'pending';
              core.info(`Job conclusion: ${conclusion}`);

              // Get step information
              const steps = job.steps || [];
              const failedSteps = steps.filter(step => step.conclusion === 'failure');

              // Create detailed comment
              let comment = `## Code Quality Results\n\n`;

              if (conclusion === 'success') {
                comment += '✅ All code quality checks passed!\n\n';
              } else if (conclusion === 'failure') {
                comment += '❌ Some code quality checks failed.\n\n';

                if (failedSteps.length > 0) {
                  comment += '### Failed Checks\n';
                  failedSteps.forEach(step => {
                    comment += `- ${step.name}\n`;
                    if (step.log) {
                      comment += '```\n' + step.log + '\n```\n';
                    }
                  });
                }
              }

              // Add check details
              comment += '\n### Quality Checks Run\n';
              comment += '- ShellCheck (shell script analysis)\n';
              comment += '- YAML Lint (YAML file validation)\n';
              comment += '- Script Formatting\n';

              // Add system information
              comment += '\n### Environment Details\n';
              comment += `- OS: ${process.env.RUNNER_OS}\n`;
              comment += `- Runner: ${process.env.RUNNER_NAME}\n`;
              comment += `- Workflow: ${context.workflow}\n`;

              // Add fix instructions
              comment += '\n### How to Fix\n';
              comment += '1. Run checks locally:\n';
              comment += '```bash\n';
              comment += '# Check shell scripts\n';
              comment += 'shellcheck setup.sh lib/**/*.sh test/*.sh\n\n';
              comment += '# Check YAML files\n';
              comment += 'yamllint .github/workflows/ config/\n';
              comment += '```\n';

              // Add helpful links
              comment += '\n### Helpful Links\n';
              const links = [
                `- [Lint Logs](${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${run_id})`,
                `- [Code Style Guide](${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/blob/main/docs/code-style.md)`,
                '- [ShellCheck Documentation](https://www.shellcheck.net/)',
                '- [YAML Lint Rules](https://yamllint.readthedocs.io/en/stable/rules.html)'
              ];
              comment += links.join('\n');

              // Post comment if this is a PR
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: context.payload.pull_request.number,
                  body: comment
                });
              }

              if (conclusion === 'failure') {
                core.setFailed('Code quality checks failed. See detailed report in PR comment.');
              }
            } catch (error) {
              core.warning(`Error getting job status: ${error.message}`);
            }
