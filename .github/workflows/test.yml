---
name: Tests

on:
  push:
  pull_request:

jobs:
  test:
    runs-on: >-
      ${{
        github.event_name == 'push' &&
        github.event.repository.fork == false &&
        'macos-latest' ||
        'ubuntu-latest'
      }}
    steps:
      - uses: actions/checkout@v3

      - name: Install dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y zsh shellcheck

      - name: Install dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install shellcheck shfmt

      - name: Setup Config
        run: |
          # Create config directory
          mkdir -p config
          # Copy example config
          cp config/default.yml.example config/default.yml
          # Verify config exists
          if [[ ! -f config/default.yml ]]; then
            echo "Error: Failed to create config/default.yml"
            exit 1
          fi

      - name: Run tests
        run: |
          chmod +x ./test/test.sh
          ./test/test.sh

      - name: Run installation tests
        if: runner.os == 'macOS'
        run: |
          chmod +x ./test/test_install.sh
          ./test/test_install.sh

      - name: Report Status
        if: always()
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const run_id = context.runId;

            core.info(`Run ID: ${run_id}`);

            if (!run_id) {
              core.warning('No run ID found, skipping status report');
              return;
            }

            try {
              const jobs = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id,
              });

              const job = jobs.data.jobs.find(j => j.name === 'test');
              if (!job) {
                core.warning('Could not find test job');
                return;
              }

              const conclusion = job.conclusion || 'pending';
              core.info(`Job conclusion: ${conclusion}`);

              // Get step information
              const steps = job.steps || [];
              const failedSteps = steps.filter(step => step.conclusion === 'failure');

              // Create detailed comment
              let comment = `## Test Results\n\n`;

              if (conclusion === 'success') {
                comment += '✅ All tests passed successfully!\n\n';
              } else if (conclusion === 'failure') {
                comment += '❌ Some tests failed.\n\n';

                if (failedSteps.length > 0) {
                  comment += '### Failed Steps\n';
                  failedSteps.forEach(step => {
                    comment += `- ${step.name}\n`;
                    if (step.log) {
                      comment += '```\n' + step.log + '\n```\n';
                    }
                  });
                }
              }

              // Add system information
              comment += '\n### Environment Details\n';
              comment += `- OS: ${process.env.RUNNER_OS}\n`;
              comment += `- Runner: ${process.env.RUNNER_NAME}\n`;
              comment += `- Workflow: ${context.workflow}\n`;

              // Add helpful links
              comment += '\n### Helpful Links\n';
              comment += [
                `- [Test Logs](${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/actions/runs/${run_id})`,
                `- [Documentation](${process.env.GITHUB_SERVER_URL}/${owner}/${repo}/blob/main/docs/documentation.md)`
              ].join('\n');

              // Post comment if this is a PR
              if (context.payload.pull_request) {
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: context.payload.pull_request.number,
                  body: comment
                });
              }

              if (conclusion === 'failure') {
                core.setFailed('Tests failed. See detailed report in PR comment.');
              }
            } catch (error) {
              core.warning(`Error getting job status: ${error.message}`);
            }
